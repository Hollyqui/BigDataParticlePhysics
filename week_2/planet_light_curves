{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.6.8"
    },
    "colab": {
      "name": "Copie de beginner_tess_exomast.ipynb",
      "provenance": [],
      "collapsed_sections": []
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "kFnseMjVF1zl",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "############################ IMPORTS ######################################\n",
        "import numpy as np\n",
        "import requests\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as p\n",
        "from IPython.display import display, HTML\n",
        "import sys\n",
        "\n",
        "%matplotlib inline\n",
        "# set hardcoded values (constants)\n",
        "planeturl = \"https://exo.mast.stsci.edu/api/v0.1/exoplanets/\"\n",
        "dvurl = \"https://exo.mast.stsci.edu/api/v0.1/dvdata/tess/\"\n",
        "header={}\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qf2CP2lnF1zp",
        "colab_type": "text"
      },
      "source": [
        "<a id=\"names\"></a>\n",
        "# Get Planet\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xwyR0ye7F1zw",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "'''Returns ticid, tce and sector of a planet that is entered, throws\n",
        "errors accordingly'''\n",
        "def get_planet(planet_name):\n",
        "  try: \n",
        "    url = planeturl + \"/identifiers/\"\n",
        "    planet_names = requests.get(url = url, params = {\"name\":planet_name}, headers = header).json()\n",
        "    ticid = planet_names['tessID']\n",
        "    tce = planet_names['tessTCE']\n",
        "    print(tce)\n",
        "    print(\"Planet found successfully\")\n",
        "    print(planet_names)\n",
        "  except:\n",
        "    print(\"Planet\", \"\\\"\"+planet_name+\"\\\"\", \"does not seem to exist or is at least not discovered by tess\")\n",
        "    sys.exit(\"Please make sure the planet you chose is discovered by tess\")\n",
        "  try:\n",
        "    # just to check if it is in both databases\n",
        "    url = planeturl + planet_name + \"/properties/\"\n",
        "    planet_prop = requests.get(url = url, headers = header).json()\n",
        "    planet_prop[0].keys()\n",
        "    planet_prop[1].keys()\n",
        "  except:\n",
        "    print(\"Planet\", \"\\\"\"+planet_name+\"\\\"\", \"does not exist in all necessary catalogues\")\n",
        "    sys.exit(\"Please make sure the planet you chose exists in all necessary catalogues (check here: https://catalogs.mast.stsci.edu/eaot & https://tess.mit.edu/publications/)\")\n",
        "  url = dvurl + str(ticid) + '/tces/'\n",
        "  sectorInfo = requests.get(url = url, params = {\"tce\" : tce}, headers = header).json()\n",
        "\n",
        "  # why 11? I don't know, but it's the only number that works\n",
        "  sectors = [x[:11] for x in sectorInfo[\"TCE\"] if tce in x]\n",
        "  return ticid, tce, sectors"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qbITJneN7fGU",
        "colab_type": "text"
      },
      "source": [
        "# Plotting Helper Functions"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7d5luE5WF10L",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "'''Plots lightcurve of event'''\n",
        "def plot_lightcurve(ticid, tce, sectors):\n",
        "  url = dvurl + str(ticid) + '/table/'\n",
        "  myparams = {\"tce\" : tce,\n",
        "              \"sector\" : sectors[0]}\n",
        "\n",
        "  tce_data = requests.get(url = url, params = myparams, headers = header).json()\n",
        "  data = p.DataFrame.from_dict(tce_data['data'])\n",
        "\n",
        "  plt.figure(figsize=(14,4))\n",
        "  plt.plot(data['TIME'],data['LC_DETREND'],'.',lw=0.4)\n",
        "  plt.plot(data['TIME'],data['MODEL_INIT'],'r-',lw=0.6)\n",
        "  plt.xlabel('TIME (BTJD)')\n",
        "  plt.ylabel('Relative Flux')\n",
        "  plt.show()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AZHXLn0tF10X",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "'''Plots Bokeh curve of event'''\n",
        "def plot_bokeh(ticid, tce, sectors):\n",
        "  url = dvurl + str(ticid) + '/phaseplot/'\n",
        "  myparams = {\"tce\" : tce,\n",
        "              \"sector\" : sectors[0]}\n",
        "  display(HTML(str(requests.get(url = url, params = myparams, headers = header).content.decode('utf-8'))))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mfIL1gj07iHt",
        "colab_type": "text"
      },
      "source": [
        "# MAIN\n",
        "\n",
        "What is done here is to look at a planet based on it's name and then plot the light curves of the star it orbits to see if we can see a decrease in light intensity as it passes between us and the star."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "M-CylU-L4v6x",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def main(planet_name):\n",
        "  # get data about planet\n",
        "  ticid, tce, sectors = get_planet(planet_name)\n",
        "  # plot light curve\n",
        "  plot_lightcurve(ticid, tce, sectors)\n",
        "  # plot bokeh curve\n",
        "  plot_bokeh(ticid, tce, sectors)\n",
        "\n",
        "# now let's run it for two new planets\n",
        "main(\"WASP-101 b\")\n",
        "main(\"WASP-20 b\")"
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}