{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.6.1"
    },
    "colab": {
      "name": "Copie de interm_tesscut_astroquery.ipynb",
      "provenance": [],
      "collapsed_sections": [
        "mqNi4j8oJDSh",
        "o6tsQ_5lJDSv",
        "lfpjn3XaIdjz"
      ]
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "9QE5j9MLl2Ku",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "############### INSTALLATIONS ######################\n",
        "!pip install astroquery\n",
        "############### IMPORTS ############################\n",
        "import numpy as np\n",
        "from astroquery.mast import Catalogs\n",
        "from astroquery.mast import Tesscut\n",
        "from astropy.coordinates import SkyCoord\n",
        "from astropy.wcs import WCS\n",
        "%matplotlib inline\n",
        "# For querying for data\n",
        "import requests\n",
        "from astroquery.mast import Tesscut\n",
        "# For manipulating data\n",
        "from astropy.table import Table\n",
        "import re\n",
        "# For matplotlib plotting\n",
        "import matplotlib\n",
        "import matplotlib.pyplot as plt # my code's garbage so it needs both plt and matplotlib \n",
        "import matplotlib.animation as animation\n",
        "# For animation display\n",
        "from matplotlib import rc\n",
        "from IPython.display import HTML\n",
        "rc('animation', html='jshtml')\n",
        "# For bokeh plotting\n",
        "from bokeh import plotting\n",
        "# sys so I can throw all those nice errors that are bound to happen\n",
        "import sys\n",
        "plotting.output_notebook()\n",
        "%matplotlib inline"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mqNi4j8oJDSh",
        "colab_type": "text"
      },
      "source": [
        "<a id=\"lightcurve\"></a>\n",
        "## Helper Functions to Create a Light Curve from the Cutout\n",
        "\n",
        "We create two functions.  One to appply a photometric aperture to one image and the other to then apply that to all the images in the FLUX array."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7ug1n-6GJDSo",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "################## HELPER FUNCTIONS #####################################\n",
        "\n",
        "def aperture_phot(image, aperture):\n",
        "    flux = np.sum(image[aperture])\n",
        "\n",
        "    return flux\n",
        "\n",
        "def make_lc(flux_data, aperture):\n",
        "    flux = np.array(list (map (lambda x: aperture_phot(x, aperture), flux_data) ) )\n",
        "    return flux\n",
        "\n",
        "\n",
        "'''Calculate the flux change of all pixels in our aperture'''\n",
        "def plot_flux(hdulist):\n",
        "  hdu1 = hdulist[0]\n",
        "  aperture = hdu1[2].data == 1\n",
        "\n",
        "  flux1 = make_lc(hdu1[1].data['FLUX'], aperture)\n",
        "  time1 = hdu1[1].data['TIME']\n",
        "\n",
        "  plt.figure(figsize = (11,5))\n",
        "  plt.plot(time1, flux1, 'k.-', lw = .5)\n",
        "  plt.xlabel('TIME (BTJD)')\n",
        "  plt.ylabel('Flux (e-/s)')\n",
        "  plt.title('Flux in Photometric Aperture')\n",
        "  plt.show()\n",
        "  return flux1, aperture\n",
        "\n",
        "'''Calculate the flux change of the dimmest pixels by using percentile'''\n",
        "def plot_background_flux(hdulist):\n",
        "  hdu1 = hdulist[0]\n",
        "  bkgAperture = hdu1[1].data['FLUX'][0] < np.percentile(hdu1[1].data['FLUX'][0], 5)\n",
        "\n",
        "  bkgFlux1 = make_lc(hdu1[1].data['FLUX'], bkgAperture)\n",
        "  time1 = hdu1[1].data['TIME']\n",
        "\n",
        "  plt.figure(figsize = (11, 5))\n",
        "  plt.plot(time1, bkgFlux1, 'r.-', lw = .5)\n",
        "\n",
        "  plt.xlabel('TIME (BTJD)')\n",
        "  plt.ylabel('Estimate of Background')\n",
        "  plt.title('Background Flux')\n",
        "  plt.show()\n",
        "  return bkgFlux1, bkgAperture"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "o6tsQ_5lJDSv",
        "colab_type": "text"
      },
      "source": [
        "### Subtract the background from the flux time series\n",
        "This function plots both the overall flux, the flux of the dimmest pixel and the difference between the two. The difference here shows how much 'actual' change in the light of the star(s) there was since general changes in brightness are additive and affect all pixels (so also the dimmest one) equally"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kRFEFm2BJDSx",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def plot_bg_subtracted_flux(hdulist):\n",
        "  flux1, aperture = plot_flux(hdulist)\n",
        "  bkgFlux1, bkgAperture = plot_background_flux(hdulist)\n",
        "  bkgSubFlux = flux1 - (bkgFlux1 * np.sum(aperture) / np.sum(bkgAperture) )\n",
        "  time1 = hdulist[0][1].data['TIME']\n",
        "  plt.figure(figsize = (11,5))\n",
        "  plt.plot(time1, bkgSubFlux,'.-k', lw = 0.5)\n",
        "\n",
        "  plt.xlabel('TIME (BTJD)')\n",
        "  plt.ylabel('Flux (e-/s)')\n",
        "  plt.title('Background Subtracted Flux')\n",
        "  plt.show()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lfpjn3XaIdjz",
        "colab_type": "text"
      },
      "source": [
        "# Animation Processing (Additional Work)\n",
        "Here an animation is generated which shows a timelapse of the star for the time it's observed. This is some code I hacked together myself so it's not the cleanest, but at least it works and exceeds the expectations (by quite a bit if I may mention that myself). Please ignore the lack of commenting and appreciate it for what it is - a barely functioning piece of code that does all the above computation plus some more"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kBdtDgu2tt3X",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "############### HELPER FUNCTIONS ################################\n",
        "def json_to_table(fields, data):\n",
        "    rx = re.compile(r\"varchar\\((\\d+)\\)\")\n",
        "    data_table = Table()\n",
        "    for col, atype in [(x['colname'], x['datatype']) for x in fields]:\n",
        "        col = col.strip()\n",
        "        if \"varchar\" in atype:\n",
        "            match = rx.search(atype)\n",
        "            atype = \"U\" + match.group(1)\n",
        "        if atype == \"real\":\n",
        "            atype = \"float\"\n",
        "        data_table[col] = np.array([x.get(col, None) for x in data], dtype=atype)\n",
        "    return data_table\n",
        "\n",
        "def find_index(cutout_table, btjd):\n",
        "    return (np.abs(cutout_table['TIME'] - btjd)).argmin()\n",
        "\n",
        "''' Creates animation based on image array'''\n",
        "def make_animation(data_array, start_frame=0, end_frame=None, vmin=None, vmax=None, delay=1):    \n",
        "    if not vmin:\n",
        "        vmin = np.min(data_array)\n",
        "    if not vmax:\n",
        "        vmax = np.max(data_array)\n",
        "        \n",
        "    if not end_frame:\n",
        "        end_frame = len(data_array) - 1 # set to the end of the array\n",
        "    num_frames = end_frame - start_frame + 1 # include the end frame\n",
        "        \n",
        "    def animate(i, fig, ax, binarytab, start=0):\n",
        "        \"\"\"Function used to update the animation\"\"\"\n",
        "        ax.set_title(\"Epoch #\" + str(i+start))\n",
        "        im = ax.imshow(binarytab[i+start], cmap=plt.cm.YlGnBu_r, vmin=vmin, vmax=vmax)\n",
        "        return im,\n",
        "    \n",
        "    # Create initial plot.\n",
        "    fig, ax = plt.subplots(figsize=(10,10))\n",
        "    ax.imshow(data_array[start_frame], cmap=plt.cm.YlGnBu_r, vmin=vmin, vmax=vmax)\n",
        "\n",
        "    ani = animation.FuncAnimation(fig, animate, fargs=(fig, ax, data_array, start_frame), frames=num_frames, \n",
        "                                  interval=delay, repeat_delay=1)\n",
        "    plt.close()\n",
        "    return ani\n",
        "\n",
        "'''preprocessing of data to create the animation (also draws nice plots) This is a working mess'''\n",
        "def animation_preprocessing(ticid):\n",
        "  weird_tic_id = ticid\n",
        "  exomast_url = \"https://exo.mast.stsci.edu/api/v0.1/\"\n",
        "  list_tce_query = f\"{exomast_url}dvdata/tess/{weird_tic_id}/tces/\"\n",
        "  tce_dict = requests.get(list_tce_query).json()\n",
        "  weird_sector, weird_tce = tce_dict['TCE'][0].split(\":\")\n",
        "  dv_metadata_query = f\"{exomast_url}dvdata/tess/{weird_tic_id}/info/?tce={weird_tce}&sector={weird_sector}\"\n",
        "  metadata = requests.get(dv_metadata_query).json()\n",
        "  dv_lightcurve_query = f\"{exomast_url}dvdata/tess/{weird_tic_id}/table/?tce={weird_tce}&sector={weird_sector}\"\n",
        "  data_dict = requests.get(dv_lightcurve_query).json()\n",
        "  weird_lightcurve = json_to_table(data_dict['fields'],data_dict['data'])\n",
        "  ra = metadata['DV Data Header']['RA_OBJ']\n",
        "  dec = metadata['DV Data Header']['DEC_OBJ']\n",
        "  obj_coord = SkyCoord(ra,dec,unit=\"deg\")\n",
        "  Tesscut.get_sectors(obj_coord)\n",
        "  cutout_hdu = Tesscut.get_cutouts(obj_coord, size=50)[0]\n",
        "  cutout_table = cutout_hdu[1].data\n",
        "  bfig = plotting.figure(plot_width=850, plot_height=250, title=f\"Detrended Lightcurve (TIC{weird_tic_id})\")\n",
        "  bfig.circle(weird_lightcurve[\"TIME\"],weird_lightcurve[\"LC_DETREND\"], fill_color=\"black\",size=1, line_color=None)\n",
        "  plotting.show(bfig)\n",
        "  return cutout_table['FLUX']\n",
        "\n",
        "'''Creates an animation showing what the observed object looks like based on the ticid and a\n",
        "timelapse factor that determines how sped up the video is''' \n",
        "def create_animation(ticid, timelapse_factor):\n",
        "  # preprocess the data\n",
        "  cutout_flux = animation_preprocessing(ticid=ticid)\n",
        "  # (get every tenth frame)\n",
        "  cutout_flux_timelapse = []\n",
        "  for i in range(len(cutout_flux)):\n",
        "    if (i%timelapse_factor) == 0:\n",
        "      cutout_flux_timelapse.append(cutout_flux[i])\n",
        "  print(\"Timelapse Frames:\", len(cutout_flux_timelapse))\n",
        "  start = 0\n",
        "  end = len(cutout_flux_timelapse)-1\n",
        "  # create actual animation\n",
        "  make_animation(cutout_flux_timelapse, start, end, vmax=500)\n",
        "  return cutout_flux_timelapse, start, end"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ezd1VVull5O1",
        "colab_type": "text"
      },
      "source": [
        "#MAIN\n",
        "\n",
        "What we are doing here is to take the TIC ID of a celestial body, find it's coordinates, look at how it's emitted light changes (e.g. if a planet passes by or if it pulsates) and plot the corresponding light curves. Then an animation is created that shows how the area looks like as recorded by the telescope (note colour here corresponds to light intensity). Based on that we can investigate various celestial bodies and see if we can find irregularities in their light emission (and if we do find what caused them)."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Evu4hzH4mBo1",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def main(ticid):\n",
        "  try:\n",
        "    # get right ascension and declination (coordinates) of star\n",
        "    starName = \"TIC \" + str(ticid)\n",
        "    catalogData = Catalogs.query_object(starName, radius = 4/60, catalog = \"TIC\")\n",
        "    ra = catalogData[1]['ra']\n",
        "    dec = catalogData[1]['dec']\n",
        "\n",
        "    # get hdulist based on the coordinates of star\n",
        "    hdulist = Tesscut.get_cutouts(SkyCoord(ra, dec, unit = \"deg\"), 20)\n",
        "  except:\n",
        "    # throw exception if any of this cannot be done\n",
        "    sys.exit(\"The TIC ID could not be found. This object may not exist\")\n",
        "\n",
        "  # plot the change in brightness\n",
        "  plot_bg_subtracted_flux(hdulist)\n",
        "\n",
        "  # get all data for animation (function to animate cannot be called within another \n",
        "  # function, hence outside of main). This also uses a different method to plot the\n",
        "  # same plots that we got before\n",
        "  cutout_flux_timelapse, start, end = create_animation(ticid=ticid, timelapse_factor=10)\n",
        "  return cutout_flux_timelapse, start, end\n",
        "\n",
        "############ Here let's run our script for two objects! ################\n",
        "cutout_flux_timelapse, start, end = main(394137592)\n",
        "# can't run from within a function when using colab, no clue why not. This is infuriating because it makes\n",
        "# my already ugly code about 10 times uglier. Note that this processing might take long unless timelapse very fast\n",
        "make_animation(cutout_flux_timelapse, start, end)\n",
        "\n",
        "cutout_flux_timelapse, start, end = main(214568914)\n",
        "make_animation(cutout_flux_timelapse, start, end)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MVVgyz6GesGa",
        "colab_type": "text"
      },
      "source": [
        "NOTE IF IT DOESN'T RUN: The database is kinda unreliable so I had it happen that it can't connect and then tells you the object doesn't exist:/"
      ]
    }
  ]
}